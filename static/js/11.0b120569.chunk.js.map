{"version":3,"sources":["../../src/index.ts"],"names":["URI_AVAILABLE","UserRejectedRequestError","_this","name","constructor","message","_inheritsLoose","Error","getSupportedChains","supportedChainIds","rpc","Object","keys","map","k","Number","undefined","WalletConnectConnector","config","_this2","handleChainChanged","bind","handleAccountsChanged","handleDisconnect","_proto","chainId","this","emitUpdate","accounts","account","emitDeactivate","activate","_this4","walletConnectProvider","on","enable","then","error","provider","m","WalletConnectProvider","e","getProvider","getChainId","Promise","resolve","getAccount","deactivate","removeListener","disconnect","close","AbstractConnector"],"mappings":"koDAIaA,EAAgB,gBAMhBC,EAAb,YACE,a,aACEC,sBACKC,KAAOD,EAAKE,YAAYD,KAC7BD,EAAKG,QAAU,iC,EAJnB,OAAAC,OAAA,KAA8CC,QAQ9C,SAASC,EAAT,G,IAA8BC,sBAAmBC,QAC/C,OAAID,IAIGC,EAAMC,OAAOC,KAAKF,GAAKG,KAAI,SAAAC,GAAC,OAAIC,OAAOD,WAAME,G,IAGzCC,EAAb,YAKE,WAAYC,G,aACVC,cAAM,CAAEV,kBAAmBD,EAAmBU,MAA9C,MAEKA,OAASA,EAEdC,EAAKC,mBAAqBD,EAAKC,mBAAmBC,KAAxB,MAC1BF,EAAKG,sBAAwBH,EAAKG,sBAAsBD,KAA3B,MAC7BF,EAAKI,iBAAmBJ,EAAKI,iBAAiBF,KAAtB,M,EAZ5Bf,OAAA,yBAAAkB,EAeUJ,mBAAA,SAAmBK,GAIzBC,KAAKC,WAAW,CAAEF,aAnBtBD,EAsBUF,sBAAA,SAAsBM,GAI5BF,KAAKC,WAAW,CAAEE,QAASD,EAAS,MA1BxCJ,EA6BUD,iBAAA,WAING,KAAKI,kBAjCTN,EAoCeO,SApCf,e,MAqCSL,K,oBAKLM,EAAKC,sBAAsBC,GAAG,eAAgBF,EAAKZ,oBACnDY,EAAKC,sBAAsBC,GAAG,kBAAmBF,EAAKV,uBACtDU,EAAKC,sBAAsBC,GAAG,aAAcF,EAAKT,kB,gBAE3BS,EAAKC,sBACxBE,SACAC,MAAK,SAACR,GAAD,OAAgCA,EAAS,MAF3B,OAGb,SAACS,GAEN,GAAsB,sBAAlBA,EAAMhC,QACR,MAAM,IAAIJ,EAGZ,MAAMoC,MATY,eAAhBR,GAYN,MAAO,CAAES,SAAUN,EAAKC,sBAAuBJ,e,iBArB1CG,EAAKC,sB,uBAC4B,qDAA2CG,MAAK,SAAAG,GAAC,4BAAIA,OAAJ,EAAIA,EAAC,SAAL,EAAkBA,MAAnE,eAA9BC,GACNR,EAAKC,sBAAwB,IAAIO,EAAsBR,EAAKd,W,mDAvClE,MAAAuB,GAAA,sBAAAA,KAAAjB,EA6DekB,YA7Df,eA8DI,uBAAOhB,KAAKO,uBA9DhB,MAAAQ,GAAA,sBAAAA,KAAAjB,EAiEemB,WAjEf,eAkEI,OAAOC,QAAQC,QAAQnB,KAAKO,sBAAsBR,SAlEtD,MAAAgB,GAAA,sBAAAA,KAAAjB,EAqEesB,WArEf,eAsEI,OAAOF,QAAQC,QAAQnB,KAAKO,sBAAsBL,UAAUQ,MAAK,SAACR,GAAD,OAAgCA,EAAS,MAtE9G,MAAAa,GAAA,sBAAAA,KAAAjB,EAyESuB,WAAA,WACDrB,KAAKO,wBACPP,KAAKO,sBAAsBe,eAAe,aAActB,KAAKH,kBAC7DG,KAAKO,sBAAsBe,eAAe,eAAgBtB,KAAKN,oBAC/DM,KAAKO,sBAAsBe,eAAe,kBAAmBtB,KAAKJ,uBAClEI,KAAKO,sBAAsBgB,eA9EjCzB,EAkFe0B,MAlFf,e,OAmFIxB,KAAKI,iB,kBAnFT,MAAAW,GAAA,sBAAAA,KAAA,GAA4CU","file":"static/js/11.0b120569.chunk.js","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport { IWCEthRpcConnectionOptions } from '@walletconnect/types'\n\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\n\nexport interface WalletConnectConnectorArguments extends IWCEthRpcConnectionOptions {\n  supportedChainIds?: number[]\n}\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\nfunction getSupportedChains({ supportedChainIds, rpc }: WalletConnectConnectorArguments): number[] | undefined {\n  if (supportedChainIds) {\n    return supportedChainIds\n  }\n\n  return rpc ? Object.keys(rpc).map(k => Number(k)) : undefined\n}\n\nexport class WalletConnectConnector extends AbstractConnector {\n  private readonly config: WalletConnectConnectorArguments\n\n  public walletConnectProvider?: any\n\n  constructor(config: WalletConnectConnectorArguments) {\n    super({ supportedChainIds: getSupportedChains(config) })\n\n    this.config = config\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleDisconnect = this.handleDisconnect.bind(this)\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n\n  private handleDisconnect(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'disconnect' event\")\n    }\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletConnectProvider) {\n      const WalletConnectProvider = await import('@walletconnect/ethereum-provider').then(m => m?.default ?? m)\n      this.walletConnectProvider = new WalletConnectProvider(this.config)\n    }\n\n    this.walletConnectProvider.on('chainChanged', this.handleChainChanged)\n    this.walletConnectProvider.on('accountsChanged', this.handleAccountsChanged)\n    this.walletConnectProvider.on('disconnect', this.handleDisconnect)\n\n    const account = await this.walletConnectProvider\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n      .catch((error: Error): void => {\n        // TODO ideally this would be a better check\n        if (error.message === 'User closed modal') {\n          throw new UserRejectedRequestError()\n        }\n\n        throw error\n      })\n\n    return { provider: this.walletConnectProvider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.walletConnectProvider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return Promise.resolve(this.walletConnectProvider.chainId)\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return Promise.resolve(this.walletConnectProvider.accounts).then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect)\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider.disconnect()\n    }\n  }\n\n  public async close() {\n    this.emitDeactivate()\n  }\n}\n"],"sourceRoot":""}